package com.kaer.nfc.demo;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.nfc.NfcAdapter;
import android.nfc.Tag;
import android.nfc.tech.NfcB;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.kaer.nfc.sdk.ByteUtils;
import com.kaer.nfc.sdk.ConnectHelper;
import com.kaer.nfc.sdk.ConnectHelper.Connect;
import com.kaer.nfc.sdk.ConnectHelper.OnConnectListener;
import com.kaer.nfc.sdk.IDCardItem;
import com.kaer.nfc.sdk.LogUtils;

public class IDReaderDemo extends Activity implements OnConnectListener,
		OnClickListener {
	private NfcB nfcbTag;
	private int flag;
	public static String IP = "218.56.11.180";
	// 218.56.11.180 192.168.40.147
	public static int PORT = 18320;
	private ConnectHelper tcpHelper;
	private String ip;
	private int port;
	private TextView message;
	private ImageView photoIv;
	private EditText ipEt, portEt;
	private Button btnConnect, btnDisconnect, btnRead, btnClear;
	private PendingIntent mPendingIntent;
	private String[][] mTechLists;
	private IntentFilter[] mFilters;
	private NfcAdapter mAdapter;
	private static final int UPDATE_MESSAGE = 1;
	private long startTime;
	private ProgressBar proBar;
	private boolean isReading;

	@Override
	public void tcpConnectResult(boolean result) {
		if (result) {
			print("服务器连接成功!");
			readCard();
			changeBtnStatus(false);
		} else {
			print("服务器连接失败!");
		}
	}

	@Override
	public void disconnect(boolean Reconnect) {
		// TODO Auto-generated method stub
		print("与服务器断开连接");
		changeBtnStatus(true);

	}

	private void changeBtnStatus(boolean flag) {
		// btnConnect.setVisibility(flag ? View.VISIBLE : View.GONE);
		// btnDisconnect.setVisibility(!flag ? View.VISIBLE : View.GONE);

	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		initWidget();
		tcpHelper = ConnectHelper.getInstance();
		tcpHelper.setContext(this);
		tcpHelper.setOnConnectListener(this);
		mAdapter = NfcAdapter.getDefaultAdapter(IDReaderDemo.this);
		mPendingIntent = PendingIntent.getActivity(this, 0, new Intent(this,
				getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);
		IntentFilter tech = new IntentFilter(NfcAdapter.ACTION_TECH_DISCOVERED);
		mFilters = new IntentFilter[] { tech, };
		mTechLists = new String[][] { new String[] { NfcB.class.getName(), }, };
		onNewIntent(getIntent());

	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if (mAdapter != null)
			mAdapter.enableForegroundDispatch(this, mPendingIntent, mFilters,
					mTechLists);
	}

	private void initWidget() {

		message = (TextView) findViewById(R.id.message);
		photoIv = (ImageView) findViewById(R.id.photo);
		ipEt = (EditText) findViewById(R.id.ip);

		portEt = (EditText) findViewById(R.id.port);
		btnConnect = (Button) findViewById(R.id.btnConnect);
		btnDisconnect = (Button) findViewById(R.id.btnDisconnect);
		btnRead = (Button) findViewById(R.id.btnRead);
		btnClear = (Button) findViewById(R.id.btnClear);

		btnConnect.setOnClickListener(this);
		btnDisconnect.setOnClickListener(this);
		btnRead.setOnClickListener(this);
		btnClear.setOnClickListener(this);
		proBar = (ProgressBar) findViewById(R.id.probar);

		SharedPreferences sp = getSharedPreferences("info", MODE_PRIVATE);
		ip = sp.getString("ip", IP);
		port = sp.getInt("port", PORT);
		ipEt.setText(IP);
		portEt.setText("" + PORT);

	}

	@Override
	protected void onNewIntent(Intent intent) {
		// TODO Auto-generated method stub
		super.onNewIntent(intent);
		if (/*
			 * nfcbTag == null &&
			 */NfcAdapter.ACTION_TECH_DISCOVERED.equals(intent.getAction())) {

			Tag tag = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
			String[] arr = tag.getTechList();
			List<String> list = Arrays.asList(arr);
			for (String string : list) {
				System.out.println("支持的技术=" + string);
			}
			if (!list.contains("android.nfc.tech.NfcB")) {
				// 不是NFCB模式的卡
				return;
			}
			if (!isReading) {
				nfcbTag = NfcB.get(tag);
				try {
					if (!nfcbTag.isConnected()) {
						nfcbTag.connect();
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			// 开始连接服务器
			print(ByteUtils.formatData(intent
					.getByteArrayExtra(NfcAdapter.EXTRA_ID)));

		}

	}

	private void action() {
		if (ConnectHelper.getInstance().getConnect() == Connect.Disconnect) {
			connect();
		} else {
			print("服务器已连接");
			readCard();
		}

	}

	private void connect() {
		if (TextUtils.isEmpty(ipEt.getText())) {
			print("ip地址不能为空");
		} else if (TextUtils.isEmpty(portEt.getText())) {
			print("端口不能为空");
		} else {
			SharedPreferences sp = getSharedPreferences("info", MODE_PRIVATE);
			SharedPreferences.Editor editor = sp.edit();
			String ip = ipEt.getText().toString();
			String port = portEt.getText().toString();
			editor.putString("ip", ip);
			editor.putInt("port", Integer.parseInt(port));
			editor.commit();
			print("正在连接服务器...");
			tcpHelper.connect(ip, Integer.parseInt(port));
		}
	}

	private void readCard() {
		proBar.setVisibility(View.VISIBLE);
		int code = tcpHelper.readCard(nfcbTag);
		switch (code) {
		case 0:
			isReading = true;
			print("开始读取身份证 :" + code);
			startTime = System.currentTimeMillis();
			break;
		case -1:
			isReading = false;

			proBar.setVisibility(View.GONE);

			print("未贴身份证");
			break;
		case -2:
			isReading = false;

			proBar.setVisibility(View.GONE);

			print("服务器未连接");

			break;
		default:
			proBar.setVisibility(View.GONE);
			break;
		}

	}

	public void print(String string) {
		String msg = message.getText().toString().trim();
		message.setText(msg + "\n" + string);
		LogUtils.d(msg);
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.btnClear:
			message.setText(null);
			break;
		case R.id.btnRead:
			message.setText(null);
			photoIv.setImageBitmap(null);
			action();
			break;
		// case R.id.btnConnect:
		// if (ConnectHelper.getInstance().getConnect() == Connect.Disconnect) {
		// print("正在连接服务器...");
		// tcpHelper.connect(ipEt.getText().toString(),
		// Integer.parseInt(portEt.getText().toString()));
		// } else {
		// print("服务器已连接");
		// }
		// break;
		// case R.id.btnDisconnect:
		// if (ConnectHelper.getInstance().getConnect() == Connect.Connected) {
		// message.setText(null);
		// tcpHelper.disconnect(true);
		// }
		// break;
		default:
			break;

		}

	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		if (nfcbTag != null && nfcbTag.isConnected()) {
			try {
				nfcbTag.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (mAdapter != null)
			mAdapter.disableForegroundDispatch(this);

		isReading = false;
	}

	@Override
	public void dataResult(IDCardItem arg0) {
		// TODO Auto-generated method stub
		proBar.setVisibility(View.GONE);
		isReading = false;
		tcpHelper.disconnect(true);
		switch (arg0.retCode) {
		case 1:
			message.setText(null);
			updateView(arg0);
			break;
		case 2:
			print("身份证读取过程中移动");
			break;
		case 3:
			print("请检查网络");

			break;
		default:
			break;
		}

		print("读取共耗时:" + String.valueOf(System.currentTimeMillis() - startTime)
				+ "毫秒");

	}

	private void updateView(IDCardItem item) {
		StringBuilder sb = new StringBuilder();
		sb.append("姓名:" + item.name + "\n");
		sb.append("性别:" + item.gender + "\n");
		sb.append("民族:" + item.nation + "\n");
		sb.append("出生:" + item.birth_year + "年"
				+ Integer.parseInt(item.birth_month) + "月" + item.birth_day
				+ "日" + "\n");
		sb.append("住址:" + item.address + "\n");
		sb.append("公民身份证号:" + item.certNo + "\n");
		sb.append("签发机关:" + item.certOrg + "\n");
		String effDate = item.effDate;
		String expDate = item.expDate;
		sb.append("有效期限:" + effDate.substring(0, 4) + "."
				+ effDate.substring(4, 6) + "." + effDate.substring(6, 8) + "-"
				+ expDate.substring(0, 4) + "." + expDate.substring(4, 6) + "."
				+ expDate.substring(6, 8) + "\n");
		print(sb.toString());
		photoIv.setImageBitmap(item.picBitmap);

	}
}
