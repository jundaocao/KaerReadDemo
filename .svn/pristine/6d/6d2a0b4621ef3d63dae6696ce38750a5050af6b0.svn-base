package com.kaer.nfc.demo;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.nfc.NfcAdapter;
import android.os.Bundle;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.kaer.nfc.sdk.IDCardItem;
import com.kaer.nfc.sdk.LogUtils;
import com.kaer.nfc.sdk.NfcReadClient;
import com.kaer.nfc.sdk.OnClientCallback;

public class IDReaderDemo extends Activity implements OnClientCallback,
		OnClickListener {
	private NfcReadClient mNfcReadClient;
	private TextView message;
	private ImageView photoIv;
	private Button btnRead, btnClear;
	private NfcAdapter mAdapter;
	private long startTime;
	private ProgressBar proBar;
	private TextView proTv;
	private PowerManager pm;
	private WakeLock wl;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		initWidget();
		// 必须调用
		mNfcReadClient = NfcReadClient.getInstance();
		mNfcReadClient.onCreate(IDReaderDemo.this);
		mNfcReadClient.setClientCallback(this);

		mAdapter = NfcAdapter.getDefaultAdapter(IDReaderDemo.this);
		if (mAdapter == null) {
			print("手机不支持NFC功能");
		} else if (!mAdapter.isEnabled()) {
			print("手机未打开nfc");
			new AlertDialog.Builder(IDReaderDemo.this)
					.setTitle("是否打开NFC")
					.setPositiveButton("前往",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub
									startActivity(new Intent(
											"android.settings.NFC_SETTINGS"));
								}
							}).setNegativeButton("否", null).create().show();
		}
		pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		wl = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, "nfc");
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		// 必须调用
		mNfcReadClient.onResume();
		if (wl != null && !wl.isHeld())
			wl.acquire();
	}

	private void releaseWakeLock() {
		if (wl != null && wl.isHeld()) {
			wl.release();
			wl = null;
		}
	}

	private void initWidget() {

		message = (TextView) findViewById(R.id.message);
		photoIv = (ImageView) findViewById(R.id.photo);
		btnRead = (Button) findViewById(R.id.btnRead);
		btnClear = (Button) findViewById(R.id.btnClear);
		btnRead.setOnClickListener(this);
		btnClear.setOnClickListener(this);
		proBar = (ProgressBar) findViewById(R.id.probar);
		proBar.setMax(100);
		proTv = (TextView) findViewById(R.id.proTv);
	}

	@Override
	protected void onNewIntent(Intent intent) {
		// TODO Auto-generated method stub
		super.onNewIntent(intent);

		mNfcReadClient.onNewIntent(intent);

	}

	private void readCard() {
		proBar.setVisibility(View.VISIBLE);
		int code = mNfcReadClient.readCert(this);
		switch (code) {
		case 0:
			print("开始读取身份证 :" + code);
			break;
		case -1:
			clear();
			print("未贴身份证");
			break;
		case -2:
			clear();
			print("不支持NFC或者NFC未开启");
			break;
		case -3:
			clear();
			print("读取中，不要重复点击");
			break;
		default:

			break;
		}

	}

	public void print(String string) {
		String msg = message.getText().toString().trim();
		message.setText(msg + "\n" + string);
		LogUtils.d(msg);
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.btnClear:
			message.setText(null);
			photoIv.setImageBitmap(null);

			break;
		case R.id.btnRead:
			message.setText(null);
			photoIv.setImageBitmap(null);
			readCard();
			break;
		default:
			break;

		}

	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		mNfcReadClient.onPause();
		releaseWakeLock();
	}

	@Override
	public void readResult(IDCardItem arg0) {
		// TODO Auto-generated method stub
		// if (mAdapter != null)
		// mAdapter.enableForegroundDispatch(this, mPendingIntent, mFilters,
		// mTechLists);
		clear();
		switch (arg0.retCode) {
		case 1:
			message.setText(null);
			updateView(arg0);
			break;
		case 2:
			print("身份证读取过程中移动");
			break;
		case 3:
			print("读取过程中网络异常");

			break;
		case 4:
			print("服务器连接失败");

			break;
		case 5:
			print("读取失败");

			break;
		default:
			break;
		}

		print("读取共耗时:" + String.valueOf(System.currentTimeMillis() - startTime)
				+ "毫秒");

	}

	private void updateView(IDCardItem item) {
		StringBuilder sb = new StringBuilder();
		sb.append("姓名:" + item.partyName + "\n");
		sb.append("性别:" + item.gender + "\n");
		sb.append("民族:" + item.nation + "\n");
		sb.append("出生:" + item.bornDay + "\n");
		sb.append("住址:" + item.certAddress + "\n");
		sb.append("公民身份证号:" + item.certNumber + "\n");
		sb.append("签发机关:" + item.certOrg + "\n");
		String effDate = item.effDate;
		String expDate = item.expDate;
		sb.append("有效期限:" + effDate.substring(0, 4) + "."
				+ effDate.substring(4, 6) + "." + effDate.substring(6, 8) + "-"
				+ expDate.substring(0, 4) + "." + expDate.substring(4, 6) + "."
				+ expDate.substring(6, 8) + "\n");
		print(sb.toString());
		photoIv.setImageBitmap(scale(item.picBitmap));
	}

	private Bitmap scale(Bitmap bitmap) {
		DisplayMetrics displaysMetrics = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(displaysMetrics);
		// TODO Auto-generated constructor stub
		int width = displaysMetrics.widthPixels;
		Matrix matrix = new Matrix();
		float scale = width / (4.0f * bitmap.getWidth());

		matrix.postScale(scale, scale); // 长和宽放大缩小的比例
		Bitmap resizeBmp = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),
				bitmap.getHeight(), matrix, true);
		return resizeBmp;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			if (proBar.getVisibility() == View.VISIBLE) {
				proBar.setVisibility(View.GONE);
				return true;
			}
		}
		return super.onKeyDown(keyCode, event);
	}

	private void clear() {
		proBar.setProgress(0);
		proBar.setVisibility(View.GONE);
		proTv.setText(null);
	}

	@Override
	public void returnTime(long arg0) {
		// TODO Auto-generated method stub
		proBar.setVisibility(View.VISIBLE);
		startTime = arg0;
		message.setText(null);
		photoIv.setImageBitmap(null);

	}

	@Override
	public void updateProgress(int arg0) {
		// TODO Auto-generated method stub
		proTv.setText(arg0 + " %");
		proBar.setProgress(arg0);
	}

}
